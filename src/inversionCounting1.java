import java.util.*;

/**
 * Created with IntelliJ IDEA.
 * User: balaji
 * Date: 1/28/13
 * Time: 1:23 PM
 * To change this template use File | Settings | File Templates.
 */
public class inversionCounting1 {

    public static void main(String[] args){
        int[] array = randomArray(1000);
//        int[] array = new int[]{161,170,153,33,20,81,158,95,28,194,100,90,135,124,155,25,37,112,2,122,123,65,138,62,133,171,49,51,174,30,18,110,41,50,75,107,173,1,134,71,10,187,59,47,113,195,103,114,9,78,86,38,163,22,7,197,85,193,67,130,16,97,149,191,35,115,11,200,82,87,119,186,198,66,39,55,167,144,125,61,188,128,117,131,4,60,180,48,156,176,99,185,54,136,40,46,31,29,3,96,89,21,199,142,102,13,68,57,162,141,147,69,8,116,129,175,42,181,74,143,6,84,58,148,169,108,83,164,76,79,12,105,196,101,190,91,126,140,93,154,165,168,150,17,120,26,44,27,145,192,177,166,80,160,182,178,94,189,23,56,64,109,19,73,14,159,152,132,52,121,139,15,106,127,72,43,172,36,24,88,183,151,5,77,32,34,70,53,45,63,157,146,92,118,104,179,98,137,111,184};
//        int[] array = new int[]{84,186,68,41,77,46,67,182,33,30,123,93,70,198,197,165,194,105,146,69,60,80,115,178,59,179,45,137,177,16,173,160,95,90,94,191,140,102,26,169,155,37,17,31,157,88,21,127,109,159,72,114,185,148,174,188,6,79,138,32,27,85,199,66,158,141,43,103,62,181,111,150,51,130,101,35,144,73,9,1,154,152,167,161,52,176,183,8,195,10,2,168,48,193,56,87,200,119,5,65,63,126,128,98,164,99,42,71,29,113,100,175,118,133,143,47,171,11,22,57,36,39,91,189,83,28,134,4,135,125,106,156,122,23,162,82,40,34,136,132,92,187,44,49,110,120,170,64,96,54,89,12,14,53,129,107,7,190,18,108,147,163,142,116,172,124,104,81,20,61,139,149,74,97,196,86,166,117,58,145,131,151,153,75,112,78,19,76,192,180,25,121,38,24,3,15,13,50,55,184};
//        int[] array = new int[]{130,65,75,175,151,4,27,128,90,46,61,123,10,115,155,181,174,96,22,49,21,112,178,28,14,51,138,142,85,194,55,156,183,118,56,73,3,72,105,116,198,149,164,171,107,9,197,32,141,47,23,150,99,13,40,58,160,95,188,86,119,170,129,17,134,12,16,182,76,77,69,146,168,45,152,93,34,43,100,11,79,19,37,1,81,42,74,2,172,124,111,165,185,83,20,122,126,110,187,39,176,106,15,48,7,50,38,101,148,78,64,97,167,92,125,161,53,60,189,5,190,192,136,137,35,153,18,196,80,145,114,108,193,173,186,8,24,26,117,87,63,200,154,70,54,84,88,52,98,163,179,191,68,121,135,44,6,104,143,66,25,162,140,127,41,131,94,91,30,113,62,180,184,31,157,36,109,147,59,120,177,159,158,139,144,132,103,166,57,82,133,67,89,195,169,102,199,71,33,29};
//        int[] array = new int[]{173,88,193,102,191,131,135,76,116,45,43,124,108,85,140,37,39,186,64,12,174,105,18,171,141,33,78,52,25,77,175,40,23,49,195,136,27,86,128,146,145,169,61,144,184,57,189,126,54,97,3,101,133,111,11,29,36,5,30,66,130,164,10,15,143,91,63,28,98,20,24,154,197,19,123,129,156,16,122,125,21,155,48,150,26,96,168,94,59,22,1,79,42,73,153,167,112,117,148,31,137,58,70,139,178,162,180,104,198,118,74,132,8,35,160,99,93,17,166,138,65,60,38,50,47,82,200,190,100,13,56,185,121,2,14,134,157,44,103,110,55,188,90,67,196,69,81,32,119,72,34,89,53,159,87,163,172,149,177,115,9,62,147,142,46,179,41,151,127,95,192,107,120,51,183,7,182,194,80,165,84,170,187,75,71,181,152,176,68,113,199,106,109,4,158,114,92,161,6,83};
//        int[] array = new int[]{180,187,98,49,111,107,198,4,133,184,193,96,136,1,160,3,156,22,131,9,62,29,46,65,137,174,26,86,132,37,163,162,14,123,55,2,165,94,172,57,117,53,153,71,195,145,40,109,100,197,41,124,51,106,130,113,179,25,59,73,39,79,31,16,83,146,68,23,149,151,42,140,121,11,144,84,128,200,35,143,10,77,139,177,116,60,110,8,88,101,164,91,168,52,76,196,81,93,108,152,95,147,45,192,178,87,50,85,34,118,5,21,20,127,171,105,28,173,48,13,99,186,159,47,112,125,27,15,67,70,69,12,185,161,199,135,58,56,126,122,72,82,119,30,66,24,75,191,183,120,38,97,89,190,19,154,18,194,170,176,134,78,63,141,167,33,138,155,158,142,182,36,102,181,166,7,103,44,115,17,54,43,6,114,129,32,169,74,157,189,148,80,175,150,90,92,64,104,61,188};
//        int[] array = new int[]{54,175,8,31,154,39,129,77,174,96,5,198,69,33,148,47,123,195,115,168,59,18,64,194,60,49,46,78,184,30,61,147,139,180,63,176,149,121,161,34,192,140,71,100,2,97,150,191,143,177,173,57,142,188,101,152,164,197,163,15,86,133,134,199,36,98,27,44,125,80,50,108,28,172,51,65,178,94,9,14,183,74,110,158,7,1,160,23,22,103,145,45,84,170,167,29,26,114,52,83,132,159,11,151,48,106,162,116,122,181,72,105,92,165,12,70,95,182,20,169,117,93,138,193,118,87,200,35,107,53,131,85,190,166,91,41,4,13,187,156,90,56,38,186,40,157,55,76,126,81,146,155,3,112,119,89,124,144,120,102,66,68,130,37,185,79,6,99,82,25,24,32,179,19,17,42,196,88,10,43,73,135,127,62,75,141,58,21,113,104,189,67,111,136,153,137,128,109,16,171};
//        int[] array = new int[]{168,9,107,27,183,144,154,138,173,166,73,28,65,70,96,133,34,41,2,56,54,131,167,11,109,26,50,123,146,61,122,120,180,137,188,104,66,102,58,148,192,21,147,33,160,117,174,44,139,24,141,176,124,101,119,6,30,23,106,178,20,71,84,186,127,99,132,97,134,48,149,53,42,3,128,40,118,13,7,112,25,175,171,10,184,150,179,105,64,161,110,198,163,47,145,68,164,39,130,140,85,75,31,45,12,98,197,196,87,92,125,185,116,38,156,77,29,100,16,81,190,32,93,114,170,95,162,52,1,91,136,193,191,15,143,89,8,36,165,177,88,111,135,78,37,86,83,199,103,153,17,43,90,159,80,129,82,49,18,94,60,57,181,46,5,169,121,142,51,151,195,22,63,187,62,126,72,158,113,157,79,19,152,76,4,200,155,69,172,108,182,189,35,59,74,194,115,14,67,55};
//        int[] array = new int[]{59,157,183,64,84,40,113,176,186,18,44,20,72,36,197,158,169,83,56,31,151,53,191,30,170,136,108,161,47,11,28,182,35,99,111,15,104,51,127,168,189,38,39,42,192,103,5,7,115,184,138,92,12,181,85,50,14,117,135,150,52,97,190,143,106,196,114,147,65,98,29,86,78,37,193,120,123,10,112,54,2,110,163,188,70,122,116,81,21,154,69,43,9,121,141,66,140,179,152,45,131,133,33,178,19,118,125,109,198,146,48,58,90,126,55,77,199,93,165,175,159,62,101,32,25,124,132,100,94,96,74,195,162,73,22,57,194,156,68,79,167,105,71,17,75,95,26,61,80,60,107,153,87,134,200,46,89,4,144,8,129,174,24,155,177,185,63,49,13,148,102,164,145,139,6,3,67,149,173,137,130,187,142,34,88,1,23,82,180,128,160,119,91,172,76,16,41,166,171,27};
//        int[] array = new int[]{157,94,2,149,142,145,39,21,170,173,100,83,139,58,175,128,136,5,192,11,47,67,32,12,79,148,86,66,127,3,68,55,194,88,8,129,193,116,179,65,75,113,174,43,162,27,164,188,51,124,20,98,92,7,132,10,36,78,50,161,26,64,196,160,82,172,62,112,24,153,70,146,17,15,134,159,6,9,22,106,76,105,120,187,95,155,103,165,200,29,74,137,93,141,34,31,131,118,13,23,190,177,185,80,73,189,122,14,61,91,169,135,130,96,60,144,197,52,140,104,33,114,150,16,111,183,152,184,176,147,151,48,110,87,166,85,109,186,180,35,138,41,57,25,99,123,107,102,37,63,30,81,54,117,40,71,28,143,115,101,45,46,154,158,163,195,44,53,18,69,182,56,108,19,84,42,199,38,156,178,49,198,97,89,167,72,133,4,171,126,1,59,181,191,125,168,90,121,119,77};
//        int[] array = new int[]{166,145,33,101,58,26,173,169,111,51,14,155,85,4,63,8,1,198,142,106,139,6,125,157,80,55,99,47,192,159,197,129,68,94,7,34,143,132,21,123,39,108,64,141,13,24,158,66,136,190,3,102,79,148,165,38,83,90,88,185,87,200,191,184,74,69,134,150,126,11,32,116,149,146,174,57,45,105,170,93,50,161,40,53,100,43,183,187,117,71,196,86,18,152,156,113,95,41,54,61,175,114,160,109,133,84,177,172,28,153,30,16,176,179,9,121,140,151,46,42,195,25,49,107,122,92,164,48,15,60,12,78,77,115,178,97,168,135,137,23,147,119,180,27,138,52,29,98,120,62,91,65,162,171,128,186,118,163,82,110,194,76,37,5,131,103,2,67,167,189,188,31,22,10,36,127,124,75,104,35,56,182,154,89,130,59,72,19,81,44,199,181,96,193,73,112,70,20,144,17};
//        int[] array = new int[]{1,4,2,5,3};
//        int[] array = new int[]{533,478,276,36,686,509,572,26,92,461,451,529,480,10,179,913,540,88,349,828,482,439,807,824,391,337,552,590,158,999,302,687,238,228,236,65,620,895,426,996,41,965,693,78,145,997,150,188,27,884,435,169,375,325,115,61,906,489,216,588,774,520,979,914,749,725,181,873,294,719,291,359,862,79,720,565,638,153,645,233,184,112,849,70,131,168,662,466,468,502,799,954,822,755,190,780,761,100,713,268,820,151,35,823,505,177,305,628,133,902,775,973,789,944,714,627,469,59,386,786,321,752,161,494,760,11,876,926,33,538,167,87,449,274,82,689,560,868,278,931,551,402,285,385,703,543,425,458,783,362,71,699,286,453,406,923,185,763,118,594,585,417,737,450,994,341,189,49,779,114,584,907,309,142,275,187,120,936,192,129,945,736,392,60,672,541,647,116,203,492,182,696,398,554,903,139,721,941,430,234,675,707,981,866,454,625,55,748,156,900,493,141,889,559,198,953,491,497,432,762,813,90,159,905,382,666,598,456,370,230,37,853,163,978,446,740,989,416,848,243,630,984,881,855,898,30,521,583,183,194,14,85,162,380,225,445,9,373,346,147,735,946,357,948,563,197,988,728,990,571,442,816,796,726,195,424,422,641,626,864,475,155,959,148,950,576,515,271,154,231,793,942,698,963,361,857,455,212,512,802,877,861,957,768,556,658,977,22,395,524,972,485,771,224,660,792,899,217,704,313,700,656,508,851,247,200,354,787,126,676,108,459,691,499,890,758,870,546,795,800,776,632,677,407,709,244,157,312,747,76,836,472,366,240,806,297,299,356,911,928,52,846,869,844,580,290,995,106,495,987,847,170,858,730,555,490,330,722,915,644,545,6,245,251,859,213,883,863,680,976,31,653,104,296,130,381,657,663,358,186,952,81,596,58,597,463,785,19,222,765,117,484,930,316,270,399,173,772,619,527,961,539,664,89,557,739,949,140,503,642,207,292,958,368,124,865,887,474,791,260,685,604,235,535,581,601,910,113,908,498,523,259,797,13,544,262,547,23,742,854,487,532,603,447,431,528,62,307,674,323,659,679,388,123,127,951,287,208,712,606,320,608,293,86,612,856,411,433,665,670,352,998,408,718,912,717,18,261,843,379,34,804,599,812,269,73,328,308,460,605,137,609,332,111,75,830,805,412,69,252,832,920,176,811,937,101,175,697,253,107,227,249,516,444,419,486,649,134,135,614,956,423,960,29,12,429,378,102,878,64,3,514,971,617,57,283,136,706,250,819,103,711,462,573,595,28,110,44,483,781,939,826,872,218,829,837,464,138,962,940,16,579,421,40,223,935,331,513,39,239,428,383,684,778,921,376,525,304,279,724,592,413,534,511,918,418,892,471,457,934,369,974,360,818,68,248,688,477,387,284,178,655,624,810,74,734,99,144,654,280,678,827,673,577,348,353,637,917,808,932,610,263,575,496,803,298,66,258,759,42,339,295,436,267,344,326,215,315,814,77,209,237,38,896,564,743,43,405,885,635,607,363,970,401,465,537,164,67,4,616,817,767,334,860,875,32,452,265,266,143,324,119,842,319,587,929,8,966,562,766,985,390,242,925,254,427,741,897,347,589,400,174,377,909,756,95,536,919,220,257,549,327,48,568,566,982,403,226,600,629,650,345,839,434,306,288,639,338,586,991,983,879,840,206,256,611,815,582,553,289,790,947,738,171,329,893,894,210,314,414,727,833,335,927,374,986,355,904,96,56,542,97,122,916,51,646,214,199,618,924,333,993,201,867,415,570,281,91,15,149,437,409,152,301,613,336,631,964,83,105,20,640,25,311,933,969,393,46,396,757,273,754,831,992,888,232,481,343,84,467,591,874,773,7,558,744,886,191,667,310,98,751,94,1,880,769,633,246,661,692,340,782,204,561,196,54,715,901,708,128,93,45,303,420,193,838,750,479,476,702,701,621,694,2,282,264,517,501,845,205,519,705,634,669,121,622,967,891,132,770,397,1000,47,72,166,764,871,507,24,593,710,746,716,798,394,53,636,180,80,202,745,980,500,531,300,404,526,784,777,219,695,272,229,440,389,211,504,488,602,648,682,651,50,125,351,835,975,731,801,364,852,882,365,441,317,652,506,943,788,623,367,723,578,668,63,690,850,681,643,955,841,165,277,733,825,172,410,732,569,5,753,938,160,922,443,683,438,448,322,518,671,350,384,834,372,21,470,371,530,342,318,809,522,241,146,548,221,729,255,821,17,794,968,615,473,550,510,567,574};

        int n = algo1(array);
        System.out.println("algo1:"+n);
        System.out.println("algo2:"+algo2(array));
        long startTime = System.currentTimeMillis();
//        int n = algo3(array);
        long stopTime = System.currentTimeMillis();
        //algo3(array);
        System.out.println(stopTime - startTime);
    }

    public static int algo1(int[] array){
        int inversionCount = 0;
        for(int i = 0; i<array.length; i++){
            int c1 = array[i];
            for(int j= i; j< array.length;j++){
                int c2 = array[j];
                if(c1 > c2)
                    inversionCount++;
            }

        }
        return inversionCount;
    }


    public static int[] randomArray(int size){
        int[] array = new int[size];
        int i = 0;
        while (i < size){
            int a = (int)(Math.random() * ( size - 0 ));
            array[i] = a;
            i++;
        }
        return array;
    }

    public static ArrayList<ArrayList<Integer>> divideArray(ArrayList<Integer> arrayList){
        ArrayList<ArrayList<Integer>> out = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> a = new ArrayList<Integer>();
        ArrayList<Integer> b = new ArrayList<Integer>();
        int i = 0;
        for (;i < arrayList.size()/2; i++){
            a.add(arrayList.get(i));
        }
        for (;i < arrayList.size(); i++)
            b.add(arrayList.get(i));
        out.add(a);
        out.add(b);
        return out;

    }

    public static int algo2(int[] array){
        int [] a   = new int[array.length];
        int [] b = new int[array.length];
        for (int i = 0; i < array.length; i++)
            a[i] = array[i];
        int inversions = count(array, a, b, 0, array.length - 1);
        return inversions;
    }

    private static int merge(int[] a, int[] b, int lo, int mid, int hi) {
        int inversions = 0;
        for (int k = lo; k <= hi; k++) {
            b[k] = a[k];
        }
        int i = lo, j = mid+1;
        for (int k = lo; k <= hi; k++) {
            if      (i > mid)                a[k] = b[j++];
            else if (j > hi)                 a[k] = b[i++];
            else if (b[j] < b[i]) { a[k] = b[j++]; inversions += (mid - i + 1); }
            else                             a[k] = b[i++];
        }
        return inversions;
    }

    public static int count(int[] a, int[] b, int[] c, int lo, int hi) {
        int inversions = 0;
        if (hi <= lo) return 0;
        int mid = lo + (hi - lo) / 2;
        inversions += count(a, b, c, lo, mid);
        inversions += count(a, b, c, mid+1, hi);
        inversions += merge(b, c, lo, mid, hi);
        return inversions;
    }
}


class SortCounter1{
    int r;
    ArrayList<Integer> sortedList;

    public void sort_count(ArrayList<Integer> al){
        this.r = 0;
        this.sortedList = new ArrayList<Integer>();
        MergeCount1 m = new MergeCount1();
        if(al.size() == 1){
            this.sortedList.addAll(al);
            this.r = 0;
        }
        else {
            ArrayList<ArrayList<Integer>> out = inversionCounting.divideArray(al);
            SortCounter1 s1 = new SortCounter1();
            SortCounter1 s2 = new SortCounter1();
            s1.sort_count(out.get(0));
            s2.sort_count(out.get(1));
            m.merge_count(s1.sortedList,s2.sortedList);
            this.sortedList = m.mergedList;
            if(this.r < 0 || s1.r < 0 || s2.r < 0 || m.r < 0)
                System.out.println();
            this.r = s1.r + s2.r + this.r + m.r;
        }
    }
}

class MergeCount1{
    int r;
    ArrayList<Integer> mergedList;

    public void merge_count(ArrayList<Integer> a,ArrayList<Integer> b){
        int i = 0;
        int j = 0;
        mergedList = new ArrayList<Integer>();
        while (i < a.size() && j < b.size()){
            int aa,bb;
            aa = a.get(i);
            bb = b.get(j);

            if(aa < bb) {
                mergedList.add(aa);
                i++;
            }
            else{
                mergedList.add(bb);
                j++;
            }
            if(bb < aa){
                List l = a.subList(i,a.size());
                this.r = this.r + l.size();
            }
        }
        if(i >= a.size())            {
            ArrayList<Integer> c = new ArrayList<Integer>(b.subList(j,b.size()));
            mergedList.addAll(c);
            return;
        }
        else if(j >= b.size()){
            ArrayList<Integer> c = new ArrayList<Integer>(a.subList(i,a.size()));
            mergedList.addAll(c);
            return;
        }


    }
}

